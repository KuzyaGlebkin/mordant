{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Mordant is a multiplatform library for rendering styled text in the terminal. You can use it to add color and style to text, create tables, draw animations, and more.</p> <p>Mordant has:</p> <ul> <li>Easy colorful ANSI output with automatic detection of terminal capabilities</li> <li>Markdown rendering directly to the terminal</li> <li>Widgets for laying out terminal output, including lists, tables, panels, and more</li> <li>Support for animating any widget, like progress bars and dashboards</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<p>The full documentation can be found on the website.</p>"},{"location":"#installation","title":"Installation","text":"<p>Mordant is distributed through Maven Central.</p> <pre><code>dependencies {\nimplementation(\"com.github.ajalt.mordant:mordant:2.2.0\")\n}\n</code></pre>"},{"location":"#if-youre-using-maven-instead-of-gradle-use-artifactidmordant-jvmartifactid","title":"If you\u2019re using Maven instead of Gradle, use <code>&lt;artifactId&gt;mordant-jvm&lt;/artifactId&gt;</code>","text":""},{"location":"#snapshots","title":"Snapshots","text":"Snapshot builds are also available <p> You'll need to add the Sonatype snapshots repository:  <pre><code>repositories {\nmaven {\nurl = uri(\"https://oss.sonatype.org/content/repositories/snapshots/\")\n}\n}\n</code></pre> </p>"},{"location":"changelog/","title":"Releases","text":""},{"location":"changelog/#220","title":"2.2.0","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Added <code>ColumnWidth.Custom</code> that allows more control over column width behavior in tables. (#109)</li> <li>Added <code>showPulse</code> parameter to <code>ProgressLayout.progressBar</code>, allowing you to disable the pulse animation for a bar.</li> <li>Added support for detecting terminal capabilities on mintty. Thanks to @sschuberth for the contribution. (#127)</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Update Kotlin to 1.9</li> <li>Use the native C API when building a native image on GraalVM, which reduces binary size and removes the need to reflection. Thanks to @hubvd for the contribution (#119)</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Fixed exception thrown in environments that are missing required shared native libraries.</li> <li>Fixed animations clearing too much space when the animation changes size while running. (#110)</li> <li>Improved terminal capability detection for Xterm terminals. (#113)</li> <li>Update Markdown parser dependency to fix crashes on native release executables</li> </ul>"},{"location":"changelog/#210","title":"2.1.0","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Added <code>ConfirmationPrompt</code> that asks the user to enter the same value twice, which is commonly used for password inputs.</li> </ul>"},{"location":"changelog/#201","title":"2.0.1","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Include metadata in JVM jars to support GraalVM native-image.</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Fix animations printing an extra frame after <code>stop</code> is called when running in the IntelliJ console. (#105)</li> </ul>"},{"location":"changelog/#200","title":"2.0.0","text":""},{"location":"changelog/#deprecated","title":"Deprecated","text":"<ul> <li>Deprecated <code>TerminalColors</code> is favor of <code>TextColors</code> and <code>Terminal.theme</code></li> </ul>"},{"location":"changelog/#200-beta14","title":"2.0.0-beta14","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li><code>Terminal.rawPrint</code> which allows you to print ANSI codes manually. (#91)</li> <li>Option to disable trailing line breaks on animations.</li> <li><code>Terminal.print</code>, <code>println</code>, and <code>rawPrint</code> now accept a <code>stderr</code> parameter that will print to stderr (if available). </li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Fix typo in enum name: renamed <code>Borders.TOM_BOTTOM</code> to <code>Borders.TOP_BOTTOM</code>. (#100)</li> <li>The terminal cursor will now be hidden when <code>progressAnimation</code> is running.</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Removed <code>TerminalRecorder.currentContent</code>. Use <code>stdout()</code>, <code>stderr()</code> or <code>output()</code> instead.</li> <li>Removed <code>Terminal.forStdErr()</code> and <code>TerminalInterface.forStdErr()</code>. Use <code>Terminal.println(stderr=true)</code> instead.</li> </ul>"},{"location":"changelog/#200-beta13","title":"2.0.0-beta13","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Add <code>Animation.stop()</code> to stop an animation without clearing it. (#95)</li> <li>Animations now support resuming after a call to <code>stop</code> or <code>clear</code>. (#94)</li> <li><code>TextStyles.reset</code>, <code>TextStyles.resetForeground</code>, and <code>TextStyles.resetBackground</code> to clear existing styles.</li> </ul>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Fix <code>TerminalInfo.interactive</code> not including <code>outputInteractive</code></li> <li>Fix prompts on JS targets that were broken by KT-55817 </li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Source-incompatible change: All boolean fields on <code>TextStyle</code> are now nullable. A null field indicates no change to the previous value when adding or nesting styles.</li> <li><code>verticalLayout{}</code> now defaults <code>TextAlign.NONE</code>, meaning it won\u2019t add any trailing whitespace to lines. You can return to the old behavior with <code>align = TextAlign.LEFT</code>.</li> <li>When nesting styles, the outer style will now override inner styles at the start of a string. (e.g. <code>red(blue(\"x\")) == red(\"x\")</code>) </li> <li>Definition List terms and entries can now be empty</li> </ul>"},{"location":"changelog/#200-beta12","title":"2.0.0-beta12","text":""},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Switch back to calling <code>stty</code> for <code>detectTerminalSize</code> on macOS. (#86)</li> <li><code>OverflowWrap</code> is now properly ignored when using a non-wrapping <code>Whitespace</code> value. </li> </ul>"},{"location":"changelog/#200-beta11","title":"2.0.0-beta11","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Tables and other layouts can now be completely empty (#82)</li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Update Kotlin to 1.8.0</li> </ul>"},{"location":"changelog/#removed_1","title":"Removed","text":"<ul> <li>Removed JS/Legacy publication. The JS target only publishes artifacts built with the IR compiler.</li> </ul>"},{"location":"changelog/#200-beta10","title":"2.0.0-beta10","text":""},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>JVM: terminal detection now uses JNA to call kernel functions directly. </li> <li>Interactive state of stdin and stdout are now detected separately. </li> <li>Terminal size detection is now fast since it does not need a subprocess.</li> </ul>"},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Detect terminal correctly when running in the IntelliJ terminal tab, but not through a run action. (#76)</li> </ul>"},{"location":"changelog/#deprecated_1","title":"Deprecated","text":"<ul> <li><code>timeoutMs</code> parameter to <code>TerminalDetection.updateTerminalSize</code>. This function is now fast on all platforms. </li> </ul>"},{"location":"changelog/#200-beta9","title":"2.0.0-beta9","text":""},{"location":"changelog/#changed_5","title":"Changed","text":"<ul> <li>Stop stripping trailing newline from text when using <code>Whitespace.PRE</code> (#75)</li> </ul>"},{"location":"changelog/#200-beta8","title":"2.0.0-beta8","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Implemented <code>hideInput</code> for prompts on native targets (#63)</li> <li>Improve cell-width calculation for emoji sequences like skin tone modifiers (#64)</li> <li>Added <code>Theme.plus</code> to combine two themes</li> <li>Added <code>Padding.plus</code> to combine two padding values</li> </ul>"},{"location":"changelog/#changed_6","title":"Changed","text":"<ul> <li>Replaced most of the <code>Padding</code> constructor and <code>Widget.withPadding</code> overloads with a unified builder interface</li> <li>Renamed the top level <code>row</code> and <code>column</code> builders to <code>horizonalLayout</code> and <code>verticalLayout</code>, respectively</li> <li>Update Kotlin to 1.7.20</li> <li>Kotlin/Native: use new default memory manager. Objects are no longer frozen.</li> </ul>"},{"location":"changelog/#removed_2","title":"Removed","text":"<ul> <li>Removed <code>buildWidget</code>. Use <code>horizonalLayout</code> and <code>verticalLayout</code> instead.</li> </ul>"},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Terminal detection would sometimes incorrectly identify the process as running in IntelliJ (#72)</li> <li><code>updateTerminalSize</code> would sometimes fail to find the <code>stty</code> command (#66)</li> </ul>"},{"location":"changelog/#200-beta7","title":"2.0.0-beta7","text":""},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>Functionality for reading user input: <code>Terminal.readLineOrNull</code>, <code>Terminal.prompt</code> and various <code>Prompt</code> classes</li> <li><code>TerminalRecorder</code> that saves output to memory rather than printing it.</li> <li><code>TerminalRecorder.outputAsHtml()</code> that can render recorded output as an html file.</li> <li></li> </ul>"},{"location":"changelog/#changed_7","title":"Changed","text":"<ul> <li>When building tables, <code>borders</code> has been renamed <code>cellBorders</code>, and <code>outerBorder: Boolean</code> has been replaced with <code>tableBorders: Borders?</code>, which allows more control over the table\u2019s outside borders. (#58)</li> <li>Update Kotlin to 1.7.0</li> </ul>"},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Avoid clobbering output when using <code>Terminal.forStdErr</code> while an animation is running. (#54)</li> </ul>"},{"location":"changelog/#deprecated_2","title":"Deprecated","text":"<ul> <li>Deprecated the <code>VirtualTerminalInterface</code>. Use <code>TerminalRecorder</code> instead.</li> </ul>"},{"location":"changelog/#200-beta6","title":"2.0.0-beta6","text":""},{"location":"changelog/#changed_8","title":"Changed","text":"<ul> <li>Update Kotlin to 1.6.20</li> <li>Publish JS target with the IR format in addition to LEGACY</li> </ul>"},{"location":"changelog/#fixed_7","title":"Fixed","text":"<ul> <li>Fix race condition when using ProgressAnimation and adding interceptors in JVM (#55)</li> </ul>"},{"location":"changelog/#200-beta5","title":"2.0.0-beta5","text":""},{"location":"changelog/#added_8","title":"Added","text":"<ul> <li>Progress bars and other single-line animations are now supported in the IntelliJ console (#49)</li> <li>Added <code>bottomTitle</code> to <code>Panel</code></li> <li><code>Terminal.forStdErr</code> for printing to stderr rather than stdout</li> <li>Add <code>macosArm64</code> target for native M1 macs</li> </ul>"},{"location":"changelog/#changed_9","title":"Changed","text":"<ul> <li>Update Kotlin to 1.6.10</li> <li>Breaking change: Renamed <code>Table</code> and <code>Panel</code>\u2018s <code>borderStyle</code> property to <code>borderType</code> and <code>borderTextStyle</code> to <code>borderStyle</code></li> <li>Breaking change: Renamed <code>TerminalInfo</code>\u2018s <code>stdinInteractive</code> and <code>stdoutInteractive</code> to <code>inputInteractive</code> and <code>outputInteractive</code>, respectively</li> </ul>"},{"location":"changelog/#fixed_8","title":"Fixed","text":"<ul> <li>Fix regression in clearing animations (#48)</li> </ul>"},{"location":"changelog/#200-beta4","title":"2.0.0-beta4","text":""},{"location":"changelog/#added_9","title":"Added","text":"<ul> <li><code>Spinner</code> widget that displays a looping animation</li> <li><code>EmptyEidget</code> widget that can be used as a placeholder in layouts</li> <li><code>row{}</code> and <code>column{}</code> widget layouts that create a single row/column of widgets</li> </ul>"},{"location":"changelog/#fixed_9","title":"Fixed","text":"<ul> <li>Reduced flickering on high frame rate animations</li> </ul>"},{"location":"changelog/#200-beta3","title":"2.0.0-beta3","text":""},{"location":"changelog/#changed_10","title":"Changed","text":"<ul> <li>Update Kotlin to 1.5.31</li> <li>Update Colormath to 3.0. If you use and colormath colors directly, you may need to update your imports.</li> </ul>"},{"location":"changelog/#fixed_10","title":"Fixed","text":"<ul> <li>Fixed exception thrown when parsing markdown tables with empty cells</li> <li>Fixed rendering of markdown image reference links and link content</li> </ul>"},{"location":"changelog/#200-beta2","title":"2.0.0-beta2","text":""},{"location":"changelog/#added_10","title":"Added","text":"<ul> <li>Published artifacts for macOS</li> </ul>"},{"location":"changelog/#changed_11","title":"Changed","text":"<ul> <li>Update Kotlin to 1.5.10</li> <li>All text instances and print functions now default to preformatted whitespace, meaning that spaces and newlines will be preserved. You can explicitly pass <code>Whitespace.NORMAL</code> to restore the previous behavior.</li> </ul>"},{"location":"changelog/#200-beta1","title":"2.0.0-beta1","text":""},{"location":"changelog/#added_11","title":"Added","text":"<ul> <li><code>Table.contentToCsv</code> to render a table\u2019s cells to csv format</li> <li>Added support for JavaScript and linux native targets </li> <li>Getter properties for standard theme styles</li> </ul>"},{"location":"changelog/#changed_12","title":"Changed","text":"<ul> <li>Update Kotlin to 1.4.31</li> <li>Improve terminal capabilities detection</li> </ul>"},{"location":"changelog/#200-alpha2","title":"2.0.0-alpha2","text":""},{"location":"changelog/#added_12","title":"Added","text":"<ul> <li><code>Terminal.progressAnimation</code> builder to create a customizable progress bar animation</li> <li>Improved cursor APIs and added ability to produce cursor ANSI codes as a string</li> <li>Add ability to override detected terminal interactivity separately from the ANSI capabilities  (#7)</li> </ul>"},{"location":"changelog/#changed_13","title":"Changed","text":"<ul> <li>Rework theming system to simplify customization</li> </ul>"},{"location":"changelog/#200-alpha1","title":"2.0.0-alpha1","text":"<p>Mordant 2.0 is a rewrite that retains the simple APIs of Mordant 1.0, and adds support for rendering complex widgets.</p>"},{"location":"changelog/#added_13","title":"Added","text":"<ul> <li>Added renderable widgets, including tables, panels, and lists</li> <li>Added markdown rendering</li> <li>Added a theme system to customize text styles on an entire terminal instance</li> <li>Added animations that automatically clear the previous frame when redrawing</li> </ul>"},{"location":"changelog/#changed_14","title":"Changed","text":"<ul> <li>Improved terminal capability detection</li> <li>ANSI colors and styles can now be applied through the <code>TextColors</code> and <code>TextStyles</code> top-level   objects, and <code>Terminal.print</code> will downsample th resulting strings based on the detected terminal   capabilities.</li> </ul>"},{"location":"changelog/#121","title":"1.2.1","text":""},{"location":"changelog/#changed_15","title":"Changed","text":"<ul> <li>Improve support for color detection in IntelliJ and VS Code terminals</li> </ul>"},{"location":"changelog/#120","title":"1.2.0","text":""},{"location":"changelog/#added_14","title":"Added","text":"<ul> <li>Add functions for generating ANSI cursor movement</li> <li>Add ability to generate ANSI color codes from any colormath color object</li> <li>Update colormath to 1.2.0</li> </ul>"},{"location":"changelog/#110","title":"1.1.0","text":""},{"location":"changelog/#added_15","title":"Added","text":"<ul> <li>Add support for XYZ and LAB color spaces</li> </ul>"},{"location":"changelog/#100","title":"1.0.0","text":"<ul> <li>Initial Release</li> </ul>"},{"location":"guide/","title":"Getting Started","text":"<p>You can get the library using any maven-compatible build system. Installation instructions can be found in the README.</p>"},{"location":"guide/#text-colors-and-styles","title":"Text Colors and Styles","text":"<p>Create a Terminal instance, and import any enum entries you want from TextColors and TextStyles. The println function on your <code>Terminal</code> will detect your current terminal capabilities and automatically downsample colors if necessary.</p> <p>Use <code>color.bg</code> to create a background color, or <code>color1 on color2</code> to combine a foreground and background.</p> CodeOutput <pre><code>import com.github.ajalt.mordant.rendering.TextColors.*\nimport com.github.ajalt.mordant.rendering.TextStyles.*\n\nval t = Terminal()\nt.println(brightRed(\"You can use any of the standard ANSI colors\"))\n\nval style = (bold + black + strikethrough)\nt.println(\ncyan(\"You ${(green on white)(\"can ${style(\"nest\")} styles\")} arbitrarily\")\n)\n\nt.println(rgb(\"#b4eeb4\")(\"You can also use true color and color spaces like HSL\"))\n</code></pre> <p> \u25cf\u00a0\u25cf\u00a0\u25cf\u00a0 <pre>\nYou can use any of the standard ANSI colors\nYou can nest styles arbitrarily\nYou can also use true color and other color spaces like HSL\n</pre> </p>"},{"location":"guide/#terminal-color-support-detection","title":"Terminal color support detection","text":"<p>By default, <code>Terminal()</code> will try to detect ANSI support in the current stdout stream. If you\u2019d like to override the detection, you can pass a specific value to the Terminal constructor.</p> <p>For example, to always output ANSI RGB color codes, even if stdout is currently directed to a file, you can do this:</p> <pre><code>Terminal(AnsiLevel.TRUECOLOR)\n</code></pre>"},{"location":"guide/#text-wrapping-and-alignment","title":"Text Wrapping and Alignment","text":"<p><code>Terminal.println</code> will preserve whitespace by default, but you can use the <code>Text</code> widget for more advanced formatting. You can use the Whitespace, TextAlign, and OverflowWrap enums to format text. They behave similar to the CSS properties of the same names.</p>"},{"location":"guide/#text-wrapping","title":"Text Wrapping","text":"<p>Pass one of the Whitespace values to the <code>Text</code> constructor to control how whitespace is handled. You can also set a <code>width</code> to wrap the text to a specific width rather than the terminal width.</p> CodeOutput <pre><code>val text = \"\"\"\nThis is a long line {\n    This line is indented\n}\n\"\"\".trimIndent()\n\nfor (entry in Whitespace.entries) {\nterminal.println(\nPanel(\ncontent = Text(text, whitespace = entry, width = 17),\ntitle = Text(entry.name)\n)\n)\n}\n</code></pre> <p> \u25cf\u00a0\u25cf\u00a0\u25cf\u00a0 <pre>\n\u256d\u2500\u2500\u2500\u2500 NORMAL \u2500\u2500\u2500\u2500\u256e\n\u2502This is a long  \u2502\n\u2502line { This line\u2502\n\u2502is indented }   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 NOWRAP \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502This is a long line { This line is indented }\u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 PRE \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502This is a long line {    \u2502\n\u2502    This line is indented\u2502\n\u2502}                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500\u2500\u2500 PRE_WRAP \u2500\u2500\u2500\u256e\n\u2502This is a long  \u2502\n\u2502line {          \u2502\n\u2502    This line is\u2502\n\u2502indented        \u2502\n\u2502}               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500\u2500 PRE_LINE \u2500\u2500\u256e\n\u2502This is a long\u2502\n\u2502line {        \u2502\n\u2502This line is  \u2502\n\u2502indented      \u2502\n\u2502}             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> </p> <p>Tip</p> <p>You can format styled text too.</p> <pre><code>Text(red(\"Hello, world!\"), whitespace = NORMAL)\n</code></pre>"},{"location":"guide/#text-alignment","title":"Text Alignment","text":"<p>You can use the TextAlign values to align or justify text.</p> CodeOutput <pre><code>for (entry in TextAlign.entries) {\nterminal.println(\nText(\n(black on blue)(\"align = ${entry.name}\"),\nalign = entry, width = 20\n),\n)\n}\n</code></pre> <p> \u25cf\u00a0\u25cf\u00a0\u25cf\u00a0 <pre>\nalign = LEFT        \n       align = RIGHT\n   align = CENTER   \nalign   =    JUSTIFY\nalign = NONE\n</pre> </p>"},{"location":"guide/#text-overflow","title":"Text Overflow","text":"<p>If you are wrapping text that has long words that exceed the line length by themselves, you can use the OverflowWrap enum to control how they are handled.</p> CodeOutput <pre><code>for (entry in OverflowWrap.entries) {\nterminal.println(\nPanel(\ncontent = Text(\n\"overflow_wrap\",\nwhitespace = Whitespace.NORMAL,\noverflowWrap = entry,\nwidth = 8\n),\ntitle = Text(entry.name)\n)\n)\n}\n</code></pre> <p> \u25cf\u00a0\u25cf\u00a0\u25cf\u00a0 <pre>\n\u256d\u2500\u2500 NORMAL \u2500\u2500\u2500\u256e\n\u2502overflow_wrap\u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d BREAK_WORD \u2500\u256e\n\u2502overflow     \u2502\n\u2502_wrap        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 TRUNCATE \u2500\u2500\u256e\n\u2502overflow     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 ELLIPSES \u2500\u2500\u256e\n\u2502overflo\u2026     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> </p> <p>Note</p> <p><code>OverflowWrap</code> has no effect when used with <code>Whitespace.PRE</code> or <code>Whitespace.NOWRAP</code>.</p>"},{"location":"guide/#tables","title":"Tables","text":"<p>Use the table DSL to define table widgets.</p> CodeOutput <pre><code>t.println(table {\nheader { row(\"Column 1\", \"Column 2\") }\nbody { row(\"1\", \"2\") }\n})\n</code></pre> <p> \u25cf\u00a0\u25cf\u00a0\u25cf\u00a0 <pre>\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Column 1 \u2502 Column 2 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1        \u2502 2        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> </p> <p>Mordant gives you lots of customization for your tables, including striped row styles, row and column spans, and different border styles.</p> OutputCode <p> \u25cf\u00a0\u25cf\u00a0\u25cf\u00a0 <pre>\nPercent Change  2020 2021 2022 2020-21  2021-21 \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nAverage income before taxes \u2502 $84,352 $87,432 $94,003 \u2502     3.7      7.5 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nAverage annual expenditures \u2502 $61,332 $66,928 $72,967 \u2502     9.1      9.0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nFood                      \u2502   7,310 8,289 9,343 \u2502    13.4     12.7 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nHousing                   \u2502  21,417 22,624 24,298 \u2502     5.6      7.4 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nApparel and services      \u2502   1,434 1,754 1,945 \u2502    22.3     10.9 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nTransportation            \u2502   9,826 10,961 12,295 \u2502    11.6     12.2 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nHealthcare                \u2502   5,177 5,452 5,850 \u2502     5.3      7.3 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nEntertainment             \u2502   2,909 3,568 3,458 \u2502    22.7     -3.1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nEducation                 \u2502   1,271 1,226 1,335 \u2502    -3.5      8.9 \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nRemaining income \u2502 $23,020 \u2502 $20,504 \u2502 $21,036 \u2502                  via U.S. Bureau of Labor Statistics                      </pre> </p> <pre><code>table {\nborderType = SQUARE_DOUBLE_SECTION_SEPARATOR\nborderStyle = rgb(\"#4b25b9\")\nalign = RIGHT\ntableBorders = NONE\nheader {\nstyle = brightRed + bold\nrow {\ncellBorders = NONE\ncells(\"\", \"\", \"\", \"\")\ncell(\"Percent Change\") {\ncolumnSpan = 2\nalign = CENTER\n}\n}\nrow(\"\", \"2020\", \"2021\", \"2022\", \"2020-21\", \"2021-21\") { cellBorders = BOTTOM }\n}\nbody {\nstyle = green\ncolumn(0) {\nalign = LEFT\ncellBorders = ALL\nstyle = brightBlue\n}\ncolumn(4) {\ncellBorders = LEFT_BOTTOM\nstyle = brightBlue\n}\ncolumn(5) {\nstyle = brightBlue\n}\nrowStyles(TextStyle(), dim.style)\ncellBorders = TOP_BOTTOM\nrow(\"Average income before taxes\", \"$84,352\", \"$87,432\", \"$94,003\", \"3.7\", \"7.5\")\nrow(\"Average annual expenditures\", \"$61,332\", \"$66,928\", \"$72,967\", \"9.1\", \"9.0\")\nrow(\"  Food\", \"7,310\", \"8,289\", \"9,343\", \"13.4\", \"12.7\")\nrow(\"  Housing\", \"21,417\", \"22,624\", \"24,298\", \"5.6\", \"7.4\")\nrow(\"  Apparel and services\", \"1,434\", \"1,754\", \"1,945\", \"22.3\", \"10.9\")\nrow(\"  Transportation\", \"9,826\", \"10,961\", \"12,295\", \"11.6\", \"12.2\")\nrow(\"  Healthcare\", \"5,177\", \"5,452\", \"5,850\", \"5.3\", \"7.3\")\nrow(\"  Entertainment\", \"2,909\", \"3,568\", \"3,458\", \"22.7\", \"-3.1\")\nrow(\"  Education\", \"1,271\", \"1,226\", \"1,335\", \"-3.5\", \"8.9\")\n}\nfooter {\nstyle(italic = true)\nrow {\ncells(\"Remaining income\", \"$23,020\", \"$20,504\", \"$21,036\")\n}\n}\ncaptionBottom(dim(\"via U.S. Bureau of Labor Statistics\"))\n}\n</code></pre>"},{"location":"guide/#layout","title":"Layout","text":"<p>If you need to lay out multiple widgets or strings, you can use the grid builder, which has an API similar to <code>table</code>, but doesn\u2019t apply styling by default</p> CodeOutput <pre><code>grid {\nrow(\"Grid Builder\", \"Supports\", \"Alignment\")\nrow {\ncell(\"Left\") { align = LEFT }\ncell(\"Center\") { align = CENTER }\ncell(\"Right\") { align = RIGHT }\n}\n}\n</code></pre> <p> \u25cf\u00a0\u25cf\u00a0\u25cf\u00a0 <pre>\nGrid Builder Supports Alignment\nLeft          Center      Right\n</pre> </p> <p>There are also the horizontalLayout and verticalLayout builders if you don\u2019t need a full grid.</p> CodeOutput <pre><code>horizontalLayout {\ncell(\"Spinner:\")\ncell(Spinner.Dots(initial = 2))\n}\n</code></pre> <p> \u25cf\u00a0\u25cf\u00a0\u25cf\u00a0 <pre>\nSpinner: \u2839\n</pre> </p>"},{"location":"guide/#controlling-the-cursor","title":"Controlling the cursor","text":"<p>You can show and hide the cursor, move it around, and clear parts of the screen with the cursor property on <code>Terminal</code>. If your terminal doesn\u2019t support cursor movements (like when output is redirected to a file) these commands are no-ops.</p> <pre><code>val t = Terminal()\nt.cursor.move {\nup(3)\nstartOfLine()\nclearScreenAfterCursor()\n}\nt.cursor.hide(showOnExit = true)\n</code></pre>"},{"location":"guide/#animations","title":"Animations","text":"<p>You can animate any widget like a table with Terminal.animation, or any regular string with Terminal.textAnimation.</p> CodeOutput <pre><code>val t = Terminal()\nval a = t.textAnimation&lt;Int&gt; { frame -&gt;\n(1..50).joinToString(\"\") {\nval hue = (frame + it) * 3 % 360\nTextColors.hsv(hue, 1, 1)(\"\u2501\")\n}\n}\n\nt.cursor.hide(showOnExit = true)\nrepeat(120) {\na.update(it)\nThread.sleep(25)\n}\n</code></pre> <p></p>"},{"location":"guide/#progress-bars","title":"Progress bars","text":"<p>You can create customizable progress bars that automatically compute speed and time remaining.</p> CodeOutput <pre><code>val t = Terminal()\nval progress = t.progressAnimation {\ntext(\"my-file.iso\")\npercentage()\nprogressBar()\ncompleted()\nspeed(\"B/s\")\ntimeRemaining()\n}\n</code></pre> <p> \u25cf\u00a0\u25cf\u00a0\u25cf\u00a0 <pre>\nmy-file.iso 83% \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 \u2501\u2501\u2501 25.0/30.0G 71.2MB/s  eta 0:01:10\n</pre> </p> <p>Call progress.start to animate the progress, and progress.update or progress.advance as your task completes.</p> <p>Note</p> <p>The progressAnimation builder is currently JVM-only. On other platforms, you can still use <code>t.animation { progressLayout { ... } }</code> which will render the same widget, you\u2019ll just need to call progress.build manually.</p>"},{"location":"guide/#prompting-for-input","title":"Prompting for input","text":"<p>You can ask the user to enter text and wait for a response with Terminal.prompt:</p> CodeOutput <pre><code>val t = Terminal()\nval response = t.prompt(\"Choose a size\", choices=listOf(\"small\", \"large\"))\nt.println(\"You chose: $response\")\n</code></pre> <pre><code>$ ./example\nChoose a size [small, large]: small\nYou chose: small\n</code></pre> <p>You can customize the prompt behavior further or convert the response to other types creating a subclass of the Prompt class. Mordant includes StringPrompt, YesNoPrompt, and ConfirmationPrompt classes for common use cases.</p>"}]}