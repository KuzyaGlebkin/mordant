{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mordant Colorful styling for command-line applications /m\u0254\u02d0(\u0279)d\u0259nt/ A substance used to set (i.e. bind) colored dyes on fabrics 1 Mordant has: Easy colorful ANSI output with automatic detection of terminal capabilities Markdown rendering directly to the terminal Widgets for laying out terminal output, including lists, tables, panels, and more Support for animating any widget, like progress bars and dashboards This README documents Mordant 2.0, which is in beta. You can read the docs for Mordant 1.0 here. \u00b6 Usage \u00b6 Create a Terminal instance, and import any enum entries you want from TextColors and TextStyles . The println function on your Terminal will detect your current terminal capabilities and automatically downsample ANSI codes if necessary. import com.github.ajalt.mordant.rendering.TextColors.* import com.github.ajalt.mordant.rendering.TextStyles.* val t = Terminal () t . println ( red ( \"This text will be red on terminals that support color\" )) Multiple styles \u00b6 import com.github.ajalt.mordant.rendering.TextColors.* val t = Terminal () t . println ( \" ${ red ( \" red \" ) } ${ white ( \" white \" ) } and ${ blue ( \" blue \" ) } \" ) Foreground and background colors \u00b6 t . println (( yellow on brightGreen )( \"this is easy to read, right?\" )) Background color alone \u00b6 t . println ( \"The foreground ${ brightBlue . bg ( \" color will stay the \" ) } same\" ) Combine styles and colors \u00b6 val style = ( bold + white + underline ) t . println ( style ( \"You can save styles\" )) t . println ( style ( \"to reuse\" )) Nest styles and colors \u00b6 t . println ( white ( \"You ${ ( blue on yellow )( \" can ${ ( black + strikethrough )( \" nest \" ) } styles \" ) } arbitrarily\" )) True color and other color spaces \u00b6 import com.github.ajalt.mordant.rendering.TextColors.Companion.rgb t . println ( rgb ( \"#b4eeb4\" )( \"This will get downsampled on terminals that don't support truecolor\" )) Terminal color support detection \u00b6 By default, Terminal() will try to detect ANSI support in the current stdout stream. If you\u2019d like to override the detection, you can pass a specific value to the Terminal constructor. For example, to always output ANSI RGB color codes, even if stdout is currently directed to a file, you can do this: Terminal ( AnsiLevel . TRUECOLOR ) Tables \u00b6 Use the table DSL to quickly create tables. Mordant handles ANSI styles and wide characters like CJK and emoji. val t = Terminal () t . println ( table { header { row ( \"CJK\" , \"Emojis\" ) } body { row ( \"\ubaa8\u3139\ub2e8\u314c\" , \"\ud83d\ude4a\ud83d\ude49\ud83d\ude48\" ) } }) Mordant gives you lots of customization for your tables, including striped row styles, row and column spans, and different border styles. table { borderStyle = SQUARE_DOUBLE_SECTION_SEPARATOR align = RIGHT outerBorder = false column ( 0 ) { align = LEFT borders = ALL style = magenta } column ( 3 ) { borders = ALL style = magenta } header { style ( magenta , bold = true ) row ( \"\" , \"Projected Cost\" , \"Actual Cost\" , \"Difference\" ) } body { rowStyles ( blue , brightBlue ) borders = TOM_BOTTOM row ( \"Food\" , \" $ 400 \" , \" $ 200 \" , \" $ 200 \" ) row ( \"Data\" , \" $ 100 \" , \" $ 150 \" , \"- $ 50 \" ) row ( \"Rent\" , \" $ 800 \" , \" $ 800 \" , \" $ 0 \" ) row ( \"Candles\" , \" $ 0 \" , \" $ 3 ,600\" , \"- $ 3 ,600\" ) row ( \"Utility\" , \" $ 145 \" , \" $ 150 \" , \"- $ 5 \" ) } footer { style ( bold = true ) row { cell ( \"Subtotal\" ) cell ( \" $ -3,455\" ) { columnSpan = 3 } } } captionBottom ( \"Budget courtesy @dril\" , TextStyle ( dim = true )) } Layout \u00b6 If you need to lay out multiple widgets or strings, you can use the grid builder, which has an API similar to table , but doesn\u2019t apply styling by default. There are also the horizontalLayout and verticalLayout builders if you don\u2019t need a full grid. Markdown \u00b6 Mordant can render GitHub Flavored Markdown. Hyperlinks will even be clickable if you\u2019re on a terminal that supports it, like recent versions of iTerm or Windows Terminal. val t = Terminal () t . printMarkdown ( File ( \"README.md\" ). readText ()) Controlling the cursor \u00b6 You can show and hide the cursor, move it around, and clear parts of the screen with the cursor property on Terminal . If your terminal doesn\u2019t support cursor movements (like when output is redirected to a file) these commands are no-ops. val t = Terminal () t . cursor . move { up ( 3 ) startOfLine () clearScreenAfterCursor () } t . cursor . hide ( showOnExit = true ) Animations \u00b6 You can animate any widget like a table with Terminal.animation , or any regular string with Terminal.textAnimation . val t = Terminal() val a = t.textAnimation<Int> { frame -> (1..50).joinToString(\"\") { val hue = (frame + it) * 3 % 360 t.colors.hsv(hue, 1, 1)(\"\u2501\") } } t.cursor.hide(showOnExit = true) repeat(120) { a.update(it) Thread.sleep(25) } Progress bars \u00b6 You can create customizable progress bars that automatically compute speed and time remaining. val t = Terminal () val progress = t . progressAnimation { text ( \"my-file.iso\" ) percentage () progressBar () completed () speed ( \"B/s\" ) timeRemaining () } The progressAnimation builder is currently JVM-only. On other platforms, you can still use t.animation { progressLayout { ... } } which will render the same widget, you\u2019ll just need to call progress.update manually. Call progress.start to animate the progress, and progress.update or progress.advance as your task completes. Prompting for input \u00b6 You can ask the user to enter text and wait for a response with Terminal.prompt : val t = Terminal () val response = t . prompt ( \"Choose a size\" , choices = listOf ( \"small\" , \"large\" )) t . println ( \"You chose: $ response \" ) $ ./example Choose a size [small, large]: small You chose: small You can customize the prompt behavior further or convert the response to other types creating a subclass of the Prompt class. Installation \u00b6 Mordant is distributed through Maven Central. dependencies { implementation ( \"com.github.ajalt.mordant:mordant:2.0.0-beta9\" ) } In version 2.0, the maven coordinates changed. Make sure you\u2019re using the new coordinates if you\u2019re updating from an older version. \u00b6 If you\u2019re using Maven instead of Gradle, use <artifactId>mordant-jvm</artifactId> \u00b6 Snapshots \u00b6 Snapshot builds are also available You'll need to add the Sonatype snapshots repository: repositories { maven { url = uri ( \"https://oss.sonatype.org/content/repositories/snapshots/\" ) } }","title":"Getting Started"},{"location":"#this-readme-documents-mordant-20-which-is-in-beta-you-can-read-the-docs-for-mordant-10-here","text":"","title":"This README documents Mordant 2.0, which is in beta. You can read the docs for Mordant 1.0 here."},{"location":"#usage","text":"Create a Terminal instance, and import any enum entries you want from TextColors and TextStyles . The println function on your Terminal will detect your current terminal capabilities and automatically downsample ANSI codes if necessary. import com.github.ajalt.mordant.rendering.TextColors.* import com.github.ajalt.mordant.rendering.TextStyles.* val t = Terminal () t . println ( red ( \"This text will be red on terminals that support color\" ))","title":"Usage"},{"location":"#multiple-styles","text":"import com.github.ajalt.mordant.rendering.TextColors.* val t = Terminal () t . println ( \" ${ red ( \" red \" ) } ${ white ( \" white \" ) } and ${ blue ( \" blue \" ) } \" )","title":"Multiple styles"},{"location":"#foreground-and-background-colors","text":"t . println (( yellow on brightGreen )( \"this is easy to read, right?\" ))","title":"Foreground and background colors"},{"location":"#background-color-alone","text":"t . println ( \"The foreground ${ brightBlue . bg ( \" color will stay the \" ) } same\" )","title":"Background color alone"},{"location":"#combine-styles-and-colors","text":"val style = ( bold + white + underline ) t . println ( style ( \"You can save styles\" )) t . println ( style ( \"to reuse\" ))","title":"Combine styles and colors"},{"location":"#nest-styles-and-colors","text":"t . println ( white ( \"You ${ ( blue on yellow )( \" can ${ ( black + strikethrough )( \" nest \" ) } styles \" ) } arbitrarily\" ))","title":"Nest styles and colors"},{"location":"#true-color-and-other-color-spaces","text":"import com.github.ajalt.mordant.rendering.TextColors.Companion.rgb t . println ( rgb ( \"#b4eeb4\" )( \"This will get downsampled on terminals that don't support truecolor\" ))","title":"True color and other color spaces"},{"location":"#terminal-color-support-detection","text":"By default, Terminal() will try to detect ANSI support in the current stdout stream. If you\u2019d like to override the detection, you can pass a specific value to the Terminal constructor. For example, to always output ANSI RGB color codes, even if stdout is currently directed to a file, you can do this: Terminal ( AnsiLevel . TRUECOLOR )","title":"Terminal color support detection"},{"location":"#tables","text":"Use the table DSL to quickly create tables. Mordant handles ANSI styles and wide characters like CJK and emoji. val t = Terminal () t . println ( table { header { row ( \"CJK\" , \"Emojis\" ) } body { row ( \"\ubaa8\u3139\ub2e8\u314c\" , \"\ud83d\ude4a\ud83d\ude49\ud83d\ude48\" ) } }) Mordant gives you lots of customization for your tables, including striped row styles, row and column spans, and different border styles. table { borderStyle = SQUARE_DOUBLE_SECTION_SEPARATOR align = RIGHT outerBorder = false column ( 0 ) { align = LEFT borders = ALL style = magenta } column ( 3 ) { borders = ALL style = magenta } header { style ( magenta , bold = true ) row ( \"\" , \"Projected Cost\" , \"Actual Cost\" , \"Difference\" ) } body { rowStyles ( blue , brightBlue ) borders = TOM_BOTTOM row ( \"Food\" , \" $ 400 \" , \" $ 200 \" , \" $ 200 \" ) row ( \"Data\" , \" $ 100 \" , \" $ 150 \" , \"- $ 50 \" ) row ( \"Rent\" , \" $ 800 \" , \" $ 800 \" , \" $ 0 \" ) row ( \"Candles\" , \" $ 0 \" , \" $ 3 ,600\" , \"- $ 3 ,600\" ) row ( \"Utility\" , \" $ 145 \" , \" $ 150 \" , \"- $ 5 \" ) } footer { style ( bold = true ) row { cell ( \"Subtotal\" ) cell ( \" $ -3,455\" ) { columnSpan = 3 } } } captionBottom ( \"Budget courtesy @dril\" , TextStyle ( dim = true )) }","title":"Tables"},{"location":"#layout","text":"If you need to lay out multiple widgets or strings, you can use the grid builder, which has an API similar to table , but doesn\u2019t apply styling by default. There are also the horizontalLayout and verticalLayout builders if you don\u2019t need a full grid.","title":"Layout"},{"location":"#markdown","text":"Mordant can render GitHub Flavored Markdown. Hyperlinks will even be clickable if you\u2019re on a terminal that supports it, like recent versions of iTerm or Windows Terminal. val t = Terminal () t . printMarkdown ( File ( \"README.md\" ). readText ())","title":"Markdown"},{"location":"#controlling-the-cursor","text":"You can show and hide the cursor, move it around, and clear parts of the screen with the cursor property on Terminal . If your terminal doesn\u2019t support cursor movements (like when output is redirected to a file) these commands are no-ops. val t = Terminal () t . cursor . move { up ( 3 ) startOfLine () clearScreenAfterCursor () } t . cursor . hide ( showOnExit = true )","title":"Controlling the cursor"},{"location":"#animations","text":"You can animate any widget like a table with Terminal.animation , or any regular string with Terminal.textAnimation . val t = Terminal() val a = t.textAnimation<Int> { frame -> (1..50).joinToString(\"\") { val hue = (frame + it) * 3 % 360 t.colors.hsv(hue, 1, 1)(\"\u2501\") } } t.cursor.hide(showOnExit = true) repeat(120) { a.update(it) Thread.sleep(25) }","title":"Animations"},{"location":"#progress-bars","text":"You can create customizable progress bars that automatically compute speed and time remaining. val t = Terminal () val progress = t . progressAnimation { text ( \"my-file.iso\" ) percentage () progressBar () completed () speed ( \"B/s\" ) timeRemaining () } The progressAnimation builder is currently JVM-only. On other platforms, you can still use t.animation { progressLayout { ... } } which will render the same widget, you\u2019ll just need to call progress.update manually. Call progress.start to animate the progress, and progress.update or progress.advance as your task completes.","title":"Progress bars"},{"location":"#prompting-for-input","text":"You can ask the user to enter text and wait for a response with Terminal.prompt : val t = Terminal () val response = t . prompt ( \"Choose a size\" , choices = listOf ( \"small\" , \"large\" )) t . println ( \"You chose: $ response \" ) $ ./example Choose a size [small, large]: small You chose: small You can customize the prompt behavior further or convert the response to other types creating a subclass of the Prompt class.","title":"Prompting for input"},{"location":"#installation","text":"Mordant is distributed through Maven Central. dependencies { implementation ( \"com.github.ajalt.mordant:mordant:2.0.0-beta9\" ) }","title":"Installation"},{"location":"#in-version-20-the-maven-coordinates-changed-make-sure-youre-using-the-new-coordinates-if-youre-updating-from-an-older-version","text":"","title":"In version 2.0, the maven coordinates changed. Make sure you're using the new coordinates if you're updating from an older version."},{"location":"#if-youre-using-maven-instead-of-gradle-use-artifactidmordant-jvmartifactid","text":"","title":"If you're using Maven instead of Gradle, use &lt;artifactId&gt;mordant-jvm&lt;/artifactId&gt;"},{"location":"#snapshots","text":"Snapshot builds are also available You'll need to add the Sonatype snapshots repository: repositories { maven { url = uri ( \"https://oss.sonatype.org/content/repositories/snapshots/\" ) } }","title":"Snapshots"},{"location":"changelog/","text":"2.0.0-beta9 \u00b6 Changed \u00b6 Stop stripping trailing newline from text when using Whitespace.PRE (#75) 2.0.0-beta8 \u00b6 Added \u00b6 Implemented hideInput for prompts on native targets (#63) Improve cell-width calculation for emoji sequences like skin tone modifiers (#64) Added Theme.plus to combine two themes Added Padding.plus to combine two padding values Changed \u00b6 Replaced most of the Padding constructor and Widget.withPadding overloads with a unified builder interface Renamed the top level row and column builders to horizonalLayout and verticalLayout , respectively Update Kotlin to 1.7.20 Kotlin/Native: use new default memory manager. Objects are no longer frozen. Removed \u00b6 Removed buildWidget . Use horizonalLayout and verticalLayout instead. Fixed \u00b6 Terminal detection would sometimes incorrectly identify the process as running in IntelliJ (#72) updateTerminalSize would sometimes fail to find the stty command (#66) 2.0.0-beta7 \u00b6 Added \u00b6 Functionality for reading user input: Terminal.readLineOrNull , Terminal.prompt and various Prompt classes TerminalRecorder that saves output to memory rather than printing it. TerminalRecorder.outputAsHtml() that can render recorded output as an html file. Changed \u00b6 When building tables, borders has been renamed cellBorders , and outerBorder: Boolean has been replaced with tableBorders: Borders? , which allows more control over the table\u2019s outside borders. (#58) Update Kotlin to 1.7.0 Fixed \u00b6 Avoid clobbering output when using Terminal.forStdErr while an animation is running. (#54) Deprecated \u00b6 Deprecated the VirtualTerminalInterface . Use TerminalRecorder instead. 2.0.0-beta6 \u00b6 Changed \u00b6 Update Kotlin to 1.6.20 Publish JS target with the IR format in addition to LEGACY Fixed \u00b6 Fix race condition when using ProgressAnimation and adding interceptors in JVM (#55) 2.0.0-beta5 \u00b6 Added \u00b6 Progress bars and other single-line animations are now supported in the IntelliJ console (#49) Added bottomTitle to Panel Terminal.forStdErr for printing to stderr rather than stdout Add macosArm64 target for native M1 macs Changed \u00b6 Update Kotlin to 1.6.10 Breaking change : Renamed Table and Panel \u2018s borderStyle property to borderType and borderTextStyle to borderStyle Breaking change : Renamed TerminalInfo \u2018s stdinInteractive and stdoutInteractive to inputInteractive and outputInteractive , respectively Fixed \u00b6 Fix regression in clearing animations (#48) 2.0.0-beta4 \u00b6 Added \u00b6 Spinner widget that displays a looping animation EmptyEidget widget that can be used as a placeholder in layouts row{} and column{} widget layouts that create a single row/column of widgets Fixed \u00b6 Reduced flickering on high frame rate animations 2.0.0-beta3 \u00b6 Changed \u00b6 Update Kotlin to 1.5.31 Update Colormath to 3.0. If you use and colormath colors directly, you may need to update your imports. Fixed \u00b6 Fixed exception thrown when parsing markdown tables with empty cells Fixed rendering of markdown image reference links and link content 2.0.0-beta2 \u00b6 Added \u00b6 Published artifacts for macOS Changed \u00b6 Update Kotlin to 1.5.10 All text instances and print functions now default to preformatted whitespace, meaning that spaces and newlines will be preserved. You can explicitly pass Whitespace.NORMAL to restore the previous behavior. 2.0.0-beta1 \u00b6 Added \u00b6 Table.contentToCsv to render a table\u2019s cells to csv format Added support for JavaScript and linux native targets Getter properties for standard theme styles Changed \u00b6 Update Kotlin to 1.4.31 Improve terminal capabilities detection 2.0.0-alpha2 \u00b6 Added \u00b6 Terminal.progressAnimation builder to create a customizable progress bar animation Improved cursor APIs and added ability to produce cursor ANSI codes as a string Add ability to override detected terminal interactivity separately from the ANSI capabilities (#7) Changed \u00b6 Rework theming system to simplify customization 2.0.0-alpha1 \u00b6 Mordant 2.0 is a rewrite that retains the simple APIs of Mordant 1.0, and adds support for rendering complex widgets. Added \u00b6 Added renderable widgets, including tables, panels, and lists Added markdown rendering Added a theme system to customize text styles on an entire terminal instance Added animations that automatically clear the previous frame when redrawing Changed \u00b6 Improved terminal capability detection ANSI colors and styles can now be applied through the TextColors and TextStyles top-level objects, and Terminal.print will downsample th resulting strings based on the detected terminal capabilities. 1.2.1 \u00b6 Changed \u00b6 Improve support for color detection in IntelliJ and VS Code terminals 1.2.0 \u00b6 Added \u00b6 Add functions for generating ANSI cursor movement Add ability to generate ANSI color codes from any colormath color object Update colormath to 1.2.0 1.1.0 \u00b6 Added \u00b6 Add support for XYZ and LAB color spaces 1.0.0 \u00b6 Initial Release","title":"Releases"},{"location":"changelog/#200-beta9","text":"","title":"2.0.0-beta9"},{"location":"changelog/#changed","text":"Stop stripping trailing newline from text when using Whitespace.PRE (#75)","title":"Changed"},{"location":"changelog/#200-beta8","text":"","title":"2.0.0-beta8"},{"location":"changelog/#added","text":"Implemented hideInput for prompts on native targets (#63) Improve cell-width calculation for emoji sequences like skin tone modifiers (#64) Added Theme.plus to combine two themes Added Padding.plus to combine two padding values","title":"Added"},{"location":"changelog/#changed_1","text":"Replaced most of the Padding constructor and Widget.withPadding overloads with a unified builder interface Renamed the top level row and column builders to horizonalLayout and verticalLayout , respectively Update Kotlin to 1.7.20 Kotlin/Native: use new default memory manager. Objects are no longer frozen.","title":"Changed"},{"location":"changelog/#removed","text":"Removed buildWidget . Use horizonalLayout and verticalLayout instead.","title":"Removed"},{"location":"changelog/#fixed","text":"Terminal detection would sometimes incorrectly identify the process as running in IntelliJ (#72) updateTerminalSize would sometimes fail to find the stty command (#66)","title":"Fixed"},{"location":"changelog/#200-beta7","text":"","title":"2.0.0-beta7"},{"location":"changelog/#added_1","text":"Functionality for reading user input: Terminal.readLineOrNull , Terminal.prompt and various Prompt classes TerminalRecorder that saves output to memory rather than printing it. TerminalRecorder.outputAsHtml() that can render recorded output as an html file.","title":"Added"},{"location":"changelog/#changed_2","text":"When building tables, borders has been renamed cellBorders , and outerBorder: Boolean has been replaced with tableBorders: Borders? , which allows more control over the table\u2019s outside borders. (#58) Update Kotlin to 1.7.0","title":"Changed"},{"location":"changelog/#fixed_1","text":"Avoid clobbering output when using Terminal.forStdErr while an animation is running. (#54)","title":"Fixed"},{"location":"changelog/#deprecated","text":"Deprecated the VirtualTerminalInterface . Use TerminalRecorder instead.","title":"Deprecated"},{"location":"changelog/#200-beta6","text":"","title":"2.0.0-beta6"},{"location":"changelog/#changed_3","text":"Update Kotlin to 1.6.20 Publish JS target with the IR format in addition to LEGACY","title":"Changed"},{"location":"changelog/#fixed_2","text":"Fix race condition when using ProgressAnimation and adding interceptors in JVM (#55)","title":"Fixed"},{"location":"changelog/#200-beta5","text":"","title":"2.0.0-beta5"},{"location":"changelog/#added_2","text":"Progress bars and other single-line animations are now supported in the IntelliJ console (#49) Added bottomTitle to Panel Terminal.forStdErr for printing to stderr rather than stdout Add macosArm64 target for native M1 macs","title":"Added"},{"location":"changelog/#changed_4","text":"Update Kotlin to 1.6.10 Breaking change : Renamed Table and Panel \u2018s borderStyle property to borderType and borderTextStyle to borderStyle Breaking change : Renamed TerminalInfo \u2018s stdinInteractive and stdoutInteractive to inputInteractive and outputInteractive , respectively","title":"Changed"},{"location":"changelog/#fixed_3","text":"Fix regression in clearing animations (#48)","title":"Fixed"},{"location":"changelog/#200-beta4","text":"","title":"2.0.0-beta4"},{"location":"changelog/#added_3","text":"Spinner widget that displays a looping animation EmptyEidget widget that can be used as a placeholder in layouts row{} and column{} widget layouts that create a single row/column of widgets","title":"Added"},{"location":"changelog/#fixed_4","text":"Reduced flickering on high frame rate animations","title":"Fixed"},{"location":"changelog/#200-beta3","text":"","title":"2.0.0-beta3"},{"location":"changelog/#changed_5","text":"Update Kotlin to 1.5.31 Update Colormath to 3.0. If you use and colormath colors directly, you may need to update your imports.","title":"Changed"},{"location":"changelog/#fixed_5","text":"Fixed exception thrown when parsing markdown tables with empty cells Fixed rendering of markdown image reference links and link content","title":"Fixed"},{"location":"changelog/#200-beta2","text":"","title":"2.0.0-beta2"},{"location":"changelog/#added_4","text":"Published artifacts for macOS","title":"Added"},{"location":"changelog/#changed_6","text":"Update Kotlin to 1.5.10 All text instances and print functions now default to preformatted whitespace, meaning that spaces and newlines will be preserved. You can explicitly pass Whitespace.NORMAL to restore the previous behavior.","title":"Changed"},{"location":"changelog/#200-beta1","text":"","title":"2.0.0-beta1"},{"location":"changelog/#added_5","text":"Table.contentToCsv to render a table\u2019s cells to csv format Added support for JavaScript and linux native targets Getter properties for standard theme styles","title":"Added"},{"location":"changelog/#changed_7","text":"Update Kotlin to 1.4.31 Improve terminal capabilities detection","title":"Changed"},{"location":"changelog/#200-alpha2","text":"","title":"2.0.0-alpha2"},{"location":"changelog/#added_6","text":"Terminal.progressAnimation builder to create a customizable progress bar animation Improved cursor APIs and added ability to produce cursor ANSI codes as a string Add ability to override detected terminal interactivity separately from the ANSI capabilities (#7)","title":"Added"},{"location":"changelog/#changed_8","text":"Rework theming system to simplify customization","title":"Changed"},{"location":"changelog/#200-alpha1","text":"Mordant 2.0 is a rewrite that retains the simple APIs of Mordant 1.0, and adds support for rendering complex widgets.","title":"2.0.0-alpha1"},{"location":"changelog/#added_7","text":"Added renderable widgets, including tables, panels, and lists Added markdown rendering Added a theme system to customize text styles on an entire terminal instance Added animations that automatically clear the previous frame when redrawing","title":"Added"},{"location":"changelog/#changed_9","text":"Improved terminal capability detection ANSI colors and styles can now be applied through the TextColors and TextStyles top-level objects, and Terminal.print will downsample th resulting strings based on the detected terminal capabilities.","title":"Changed"},{"location":"changelog/#121","text":"","title":"1.2.1"},{"location":"changelog/#changed_10","text":"Improve support for color detection in IntelliJ and VS Code terminals","title":"Changed"},{"location":"changelog/#120","text":"","title":"1.2.0"},{"location":"changelog/#added_8","text":"Add functions for generating ANSI cursor movement Add ability to generate ANSI color codes from any colormath color object Update colormath to 1.2.0","title":"Added"},{"location":"changelog/#110","text":"","title":"1.1.0"},{"location":"changelog/#added_9","text":"Add support for XYZ and LAB color spaces","title":"Added"},{"location":"changelog/#100","text":"Initial Release","title":"1.0.0"}]}