{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"Mordant Colorful styling for command-line applications <p>/m\u0254\u02d0(\u0279)d\u0259nt/ A substance used to set (i.e. bind) colored dyes on fabrics 1</p> <p>Mordant has:</p> <ul> <li>Easy colorful ANSI output with automatic detection of terminal capabilities</li> <li>Markdown rendering directly to the terminal</li> <li>Widgets for laying out terminal output, including lists, tables, panels, and more</li> <li>Support for animating any widget, like progress bars and dashboards</li> </ul>"},{"location":"#usage","title":"Usage","text":"<p>Create a <code>Terminal</code> instance, and import any enum entries you want from <code>TextColors</code> and <code>TextStyles</code>. The <code>println</code> function on your <code>Terminal</code> will detect your current terminal capabilities and automatically downsample ANSI codes if necessary.</p> <pre><code>import com.github.ajalt.mordant.rendering.TextColors.*\nimport com.github.ajalt.mordant.rendering.TextStyles.*\n\nval t = Terminal()\nt.println(red(\"This text will be red on terminals that support color\"))\n</code></pre> <p></p>"},{"location":"#multiple-styles","title":"Multiple styles","text":"<pre><code>import com.github.ajalt.mordant.rendering.TextColors.*\nval t = Terminal()\nt.println(\"${red(\"red\")} ${white(\"white\")} and ${blue(\"blue\")}\")\n</code></pre>"},{"location":"#foreground-and-background-colors","title":"Foreground and background colors","text":"<pre><code>t.println((yellow on brightGreen)(\"this is easy to read, right?\"))\n</code></pre>"},{"location":"#background-color-alone","title":"Background color alone","text":"<pre><code>t.println(\"The foreground ${brightBlue.bg(\"color will stay the\")} same\")\n</code></pre>"},{"location":"#combine-styles-and-colors","title":"Combine styles and colors","text":"<pre><code>val style = (bold + white + underline)\nt.println(style(\"You can save styles\"))\nt.println(style(\"to reuse\"))\n</code></pre>"},{"location":"#nest-styles-and-colors","title":"Nest styles and colors","text":"<pre><code>t.println(white(\"You ${(blue on yellow)(\"can ${(black + strikethrough)(\"nest\")} styles\")} arbitrarily\"))\n</code></pre>"},{"location":"#true-color-and-other-color-spaces","title":"True color and other color spaces","text":"<pre><code>import com.github.ajalt.mordant.rendering.TextColors.Companion.rgb\n\nt.println(rgb(\"#b4eeb4\")(\"This will get downsampled on terminals that don't support truecolor\"))\n</code></pre>"},{"location":"#terminal-color-support-detection","title":"Terminal color support detection","text":"<p>By default, <code>Terminal()</code> will try to detect ANSI support in the current stdout stream. If you\u2019d like to override the detection, you can pass a specific value to the <code>Terminal</code> constructor.</p> <p>For example, to always output ANSI RGB color codes, even if stdout is currently directed to a file, you can do this:</p> <pre><code>Terminal(AnsiLevel.TRUECOLOR)\n</code></pre>"},{"location":"#tables","title":"Tables","text":"<p>Use the <code>table</code> DSL to quickly create tables. Mordant handles ANSI styles and wide characters like CJK and emoji.</p> <pre><code>val t = Terminal()\nt.println(table {\nheader { row(\"CJK\", \"Emojis\") }\nbody { row(\"\ubaa8\u3139\ub2e8\u314c\", \"\ud83d\ude4a\ud83d\ude49\ud83d\ude48\") }\n})\n</code></pre> <p></p> <p>Mordant gives you lots of customization for your tables, including striped row styles, row and column spans, and different border styles.</p> <pre><code>table {\nborderStyle = SQUARE_DOUBLE_SECTION_SEPARATOR\nalign = RIGHT\nouterBorder = false\ncolumn(0) {\nalign = LEFT\nborders = ALL\nstyle = magenta\n}\ncolumn(3) {\nborders = ALL\nstyle = magenta\n}\nheader {\nstyle(magenta, bold = true)\nrow(\"\", \"Projected Cost\", \"Actual Cost\", \"Difference\")\n}\nbody {\nrowStyles(blue, brightBlue)\nborders = TOM_BOTTOM\nrow(\"Food\", \"$400\", \"$200\", \"$200\")\nrow(\"Data\", \"$100\", \"$150\", \"-$50\")\nrow(\"Rent\", \"$800\", \"$800\", \"$0\")\nrow(\"Candles\", \"$0\", \"$3,600\", \"-$3,600\")\nrow(\"Utility\", \"$145\", \"$150\", \"-$5\")\n}\nfooter {\nstyle(bold = true)\nrow {\ncell(\"Subtotal\")\ncell(\"$-3,455\") { columnSpan = 3 }\n}\n}\ncaptionBottom(\"Budget courtesy @dril\", TextStyle(dim = true))\n}\n</code></pre> <p></p>"},{"location":"#layout","title":"Layout","text":"<p>If you need to lay out multiple widgets or strings, you can use the <code>grid</code> builder, which has an API similar to <code>table</code>, but doesn\u2019t apply styling by default. There are also the <code>horizontalLayout</code> and <code>verticalLayout</code> builders if you don\u2019t need a full grid.</p>"},{"location":"#markdown","title":"Markdown","text":"<p>Mordant can render GitHub Flavored Markdown. Hyperlinks will even be clickable if you\u2019re on a terminal that supports it, like recent versions of iTerm or Windows Terminal.</p> <pre><code>val t = Terminal()\nt.print(Markdown(Path(\"README.md\").readText()))\n</code></pre> <p></p>"},{"location":"#controlling-the-cursor","title":"Controlling the cursor","text":"<p>You can show and hide the cursor, move it around, and clear parts of the screen with the <code>cursor</code> property on <code>Terminal</code>. If your terminal doesn\u2019t support cursor movements (like when output is redirected to a file) these commands are no-ops.</p> <pre><code>val t = Terminal()\nt.cursor.move {\nup(3)\nstartOfLine()\nclearScreenAfterCursor()\n}\nt.cursor.hide(showOnExit = true)\n</code></pre>"},{"location":"#animations","title":"Animations","text":"<p>You can animate any widget like a table with <code>Terminal.animation</code>, or any regular string with <code>Terminal.textAnimation</code>.</p> <pre><code>val t = Terminal()\nval a = t.textAnimation&lt;Int&gt; { frame -&gt;\n    (1..50).joinToString(\"\") {\n        val hue = (frame + it) * 3 % 360\n        TextColors.hsv(hue, 1, 1)(\"\u2501\")\n    }\n}\n\nt.cursor.hide(showOnExit = true)\nrepeat(120) {\n    a.update(it)\n    Thread.sleep(25)\n}\n</code></pre> <p></p>"},{"location":"#progress-bars","title":"Progress bars","text":"<p>You can create customizable progress bars that automatically compute speed and time remaining.</p> <pre><code>val t = Terminal()\nval progress = t.progressAnimation {\ntext(\"my-file.iso\")\npercentage()\nprogressBar()\ncompleted()\nspeed(\"B/s\")\ntimeRemaining()\n}\n</code></pre> <p>The <code>progressAnimation</code> builder is currently JVM-only. On other platforms, you can still use  <code>t.animation { progressLayout { ... } }</code> which will render the same widget, you\u2019ll just need to call <code>progress.update</code> manually.</p> <p></p> <p>Call <code>progress.start</code> to animate the progress, and <code>progress.update</code> or <code>progress.advance</code> as your task completes.</p>"},{"location":"#prompting-for-input","title":"Prompting for input","text":"<p>You can ask the user to enter text and wait for a response with <code>Terminal.prompt</code>:</p> <pre><code>val t = Terminal()\nval response = t.prompt(\"Choose a size\", choices=listOf(\"small\", \"large\"))\nt.println(\"You chose: $response\")\n</code></pre> <pre><code>$ ./example\nChoose a size [small, large]: small\nYou chose: small\n</code></pre> <p>You can customize the prompt behavior further or convert the response to other types  creating a subclass of the <code>Prompt</code> class. Mordant includes <code>StringPrompt</code>, <code>YesNoPrompt</code>, and <code>ConfirmationPrompt</code> classes for common use cases.</p>"},{"location":"#installation","title":"Installation","text":"<p>Mordant is distributed through Maven Central.</p> <pre><code>dependencies {\nimplementation(\"com.github.ajalt.mordant:mordant:2.1.0\")\n}\n</code></pre>"},{"location":"#if-youre-using-maven-instead-of-gradle-use-artifactidmordant-jvmartifactid","title":"If you\u2019re using Maven instead of Gradle, use <code>&lt;artifactId&gt;mordant-jvm&lt;/artifactId&gt;</code>","text":""},{"location":"#snapshots","title":"Snapshots","text":"Snapshot builds are also available <p> You'll need to add the Sonatype snapshots repository:  <pre><code>repositories {\nmaven {\nurl = uri(\"https://oss.sonatype.org/content/repositories/snapshots/\")\n}\n}\n</code></pre> </p>"},{"location":"changelog/","title":"Releases","text":""},{"location":"changelog/#210","title":"2.1.0","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Added <code>ConfirmationPrompt</code> that asks the user to enter the same value twice, which is commonly used for password inputs.</li> </ul>"},{"location":"changelog/#201","title":"2.0.1","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Include metadata in JVM jars to support GraalVM native-image.</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Fix animations printing an extra frame after <code>stop</code> is called when running in the IntelliJ console. (#105)</li> </ul>"},{"location":"changelog/#200","title":"2.0.0","text":""},{"location":"changelog/#deprecated","title":"Deprecated","text":"<ul> <li>Deprecated <code>TerminalColors</code> in favor of <code>TextColors</code> and <code>Terminal.theme</code></li> </ul>"},{"location":"changelog/#200-beta14","title":"2.0.0-beta14","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li><code>Terminal.rawPrint</code> which allows you to print ANSI codes manually. (#91)</li> <li>Option to disable trailing line breaks on animations.</li> <li><code>Terminal.print</code>, <code>println</code>, and <code>rawPrint</code> now accept a <code>stderr</code> parameter that will print to stderr (if available). </li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Fix typo in enum name: renamed <code>Borders.TOM_BOTTOM</code> to <code>Borders.TOP_BOTTOM</code>. (#100)</li> <li>The terminal cursor will now be hidden when <code>progressAnimation</code> is running.</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Removed <code>TerminalRecorder.currentContent</code>. Use <code>stdout()</code>, <code>stderr()</code> or <code>output()</code> instead.</li> <li>Removed <code>Terminal.forStdErr()</code> and <code>TerminalInterface.forStdErr()</code>. Use <code>Terminal.println(stderr=true)</code> instead.</li> </ul>"},{"location":"changelog/#200-beta13","title":"2.0.0-beta13","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Add <code>Animation.stop()</code> to stop an animation without clearing it. (#95)</li> <li>Animations now support resuming after a call to <code>stop</code> or <code>clear</code>. (#94)</li> <li><code>TextStyles.reset</code>, <code>TextStyles.resetForeground</code>, and <code>TextStyles.resetBackground</code> to clear existing styles.</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Fix <code>TerminalInfo.interactive</code> not including <code>outputInteractive</code></li> <li>Fix prompts on JS targets that were broken by KT-55817 </li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Source-incompatible change: All boolean fields on <code>TextStyle</code> are now nullable. A null field indicates no change to the previous value when adding or nesting styles.</li> <li><code>verticalLayout{}</code> now defaults <code>TextAlign.NONE</code>, meaning it won\u2019t add any trailing whitespace to lines. You can return to the old behavior with <code>align = TextAlign.LEFT</code>.</li> <li>When nesting styles, the outer style will now override inner styles at the start of a string. (e.g. <code>red(blue(\"x\")) == red(\"x\")</code>) </li> <li>Definition List terms and entries can now be empty</li> </ul>"},{"location":"changelog/#200-beta12","title":"2.0.0-beta12","text":""},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Switch back to calling <code>stty</code> for <code>detectTerminalSize</code> on macOS. (#86)</li> <li><code>OverflowWrap</code> is now properly ignored when using a non-wrapping <code>Whitespace</code> value. </li> </ul>"},{"location":"changelog/#200-beta11","title":"2.0.0-beta11","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Tables and other layouts can now be completely empty (#82)</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Update Kotlin to 1.8.0</li> </ul>"},{"location":"changelog/#removed_1","title":"Removed","text":"<ul> <li>Removed JS/Legacy publication. The JS target only publishes artifacts built with the IR compiler.</li> </ul>"},{"location":"changelog/#200-beta10","title":"2.0.0-beta10","text":""},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>JVM: terminal detection now uses JNA to call kernel functions directly. </li> <li>Interactive state of stdin and stdout are now detected separately. </li> <li>Terminal size detection is now fast since it does not need a subprocess.</li> </ul>"},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Detect terminal correctly when running in the IntelliJ terminal tab, but not through a run action. (#76)</li> </ul>"},{"location":"changelog/#deprecated_1","title":"Deprecated","text":"<ul> <li><code>timeoutMs</code> parameter to <code>TerminalDetection.updateTerminalSize</code>. This function is now fast on all platforms. </li> </ul>"},{"location":"changelog/#200-beta9","title":"2.0.0-beta9","text":""},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>Stop stripping trailing newline from text when using <code>Whitespace.PRE</code> (#75)</li> </ul>"},{"location":"changelog/#200-beta8","title":"2.0.0-beta8","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Implemented <code>hideInput</code> for prompts on native targets (#63)</li> <li>Improve cell-width calculation for emoji sequences like skin tone modifiers (#64)</li> <li>Added <code>Theme.plus</code> to combine two themes</li> <li>Added <code>Padding.plus</code> to combine two padding values</li> </ul>"},{"location":"changelog/#changed_5","title":"Changed","text":"<ul> <li>Replaced most of the <code>Padding</code> constructor and <code>Widget.withPadding</code> overloads with a unified builder interface</li> <li>Renamed the top level <code>row</code> and <code>column</code> builders to <code>horizonalLayout</code> and <code>verticalLayout</code>, respectively</li> <li>Update Kotlin to 1.7.20</li> <li>Kotlin/Native: use new default memory manager. Objects are no longer frozen.</li> </ul>"},{"location":"changelog/#removed_2","title":"Removed","text":"<ul> <li>Removed <code>buildWidget</code>. Use <code>horizonalLayout</code> and <code>verticalLayout</code> instead.</li> </ul>"},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Terminal detection would sometimes incorrectly identify the process as running in IntelliJ (#72)</li> <li><code>updateTerminalSize</code> would sometimes fail to find the <code>stty</code> command (#66)</li> </ul>"},{"location":"changelog/#200-beta7","title":"2.0.0-beta7","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Functionality for reading user input: <code>Terminal.readLineOrNull</code>, <code>Terminal.prompt</code> and various <code>Prompt</code> classes</li> <li><code>TerminalRecorder</code> that saves output to memory rather than printing it.</li> <li><code>TerminalRecorder.outputAsHtml()</code> that can render recorded output as an html file.</li> <li></li> </ul>"},{"location":"changelog/#changed_6","title":"Changed","text":"<ul> <li>When building tables, <code>borders</code> has been renamed <code>cellBorders</code>, and <code>outerBorder: Boolean</code> has been replaced with <code>tableBorders: Borders?</code>, which allows more control over the table\u2019s outside borders. (#58)</li> <li>Update Kotlin to 1.7.0</li> </ul>"},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Avoid clobbering output when using <code>Terminal.forStdErr</code> while an animation is running. (#54)</li> </ul>"},{"location":"changelog/#deprecated_2","title":"Deprecated","text":"<ul> <li>Deprecated the <code>VirtualTerminalInterface</code>. Use <code>TerminalRecorder</code> instead.</li> </ul>"},{"location":"changelog/#200-beta6","title":"2.0.0-beta6","text":""},{"location":"changelog/#changed_7","title":"Changed","text":"<ul> <li>Update Kotlin to 1.6.20</li> <li>Publish JS target with the IR format in addition to LEGACY</li> </ul>"},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Fix race condition when using ProgressAnimation and adding interceptors in JVM (#55)</li> </ul>"},{"location":"changelog/#200-beta5","title":"2.0.0-beta5","text":""},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>Progress bars and other single-line animations are now supported in the IntelliJ console (#49)</li> <li>Added <code>bottomTitle</code> to <code>Panel</code></li> <li><code>Terminal.forStdErr</code> for printing to stderr rather than stdout</li> <li>Add <code>macosArm64</code> target for native M1 macs</li> </ul>"},{"location":"changelog/#changed_8","title":"Changed","text":"<ul> <li>Update Kotlin to 1.6.10</li> <li>Breaking change: Renamed <code>Table</code> and <code>Panel</code>\u2018s <code>borderStyle</code> property to <code>borderType</code> and <code>borderTextStyle</code> to <code>borderStyle</code></li> <li>Breaking change: Renamed <code>TerminalInfo</code>\u2018s <code>stdinInteractive</code> and <code>stdoutInteractive</code> to <code>inputInteractive</code> and <code>outputInteractive</code>, respectively</li> </ul>"},{"location":"changelog/#fixed_7","title":"Fixed","text":"<ul> <li>Fix regression in clearing animations (#48)</li> </ul>"},{"location":"changelog/#200-beta4","title":"2.0.0-beta4","text":""},{"location":"changelog/#added_8","title":"Added","text":"<ul> <li><code>Spinner</code> widget that displays a looping animation</li> <li><code>EmptyEidget</code> widget that can be used as a placeholder in layouts</li> <li><code>row{}</code> and <code>column{}</code> widget layouts that create a single row/column of widgets</li> </ul>"},{"location":"changelog/#fixed_8","title":"Fixed","text":"<ul> <li>Reduced flickering on high frame rate animations</li> </ul>"},{"location":"changelog/#200-beta3","title":"2.0.0-beta3","text":""},{"location":"changelog/#changed_9","title":"Changed","text":"<ul> <li>Update Kotlin to 1.5.31</li> <li>Update Colormath to 3.0. If you use and colormath colors directly, you may need to update your imports.</li> </ul>"},{"location":"changelog/#fixed_9","title":"Fixed","text":"<ul> <li>Fixed exception thrown when parsing markdown tables with empty cells</li> <li>Fixed rendering of markdown image reference links and link content</li> </ul>"},{"location":"changelog/#200-beta2","title":"2.0.0-beta2","text":""},{"location":"changelog/#added_9","title":"Added","text":"<ul> <li>Published artifacts for macOS</li> </ul>"},{"location":"changelog/#changed_10","title":"Changed","text":"<ul> <li>Update Kotlin to 1.5.10</li> <li>All text instances and print functions now default to preformatted whitespace, meaning that spaces and newlines will be preserved. You can explicitly pass <code>Whitespace.NORMAL</code> to restore the previous behavior.</li> </ul>"},{"location":"changelog/#200-beta1","title":"2.0.0-beta1","text":""},{"location":"changelog/#added_10","title":"Added","text":"<ul> <li><code>Table.contentToCsv</code> to render a table\u2019s cells to csv format</li> <li>Added support for JavaScript and linux native targets </li> <li>Getter properties for standard theme styles</li> </ul>"},{"location":"changelog/#changed_11","title":"Changed","text":"<ul> <li>Update Kotlin to 1.4.31</li> <li>Improve terminal capabilities detection</li> </ul>"},{"location":"changelog/#200-alpha2","title":"2.0.0-alpha2","text":""},{"location":"changelog/#added_11","title":"Added","text":"<ul> <li><code>Terminal.progressAnimation</code> builder to create a customizable progress bar animation</li> <li>Improved cursor APIs and added ability to produce cursor ANSI codes as a string</li> <li>Add ability to override detected terminal interactivity separately from the ANSI capabilities  (#7)</li> </ul>"},{"location":"changelog/#changed_12","title":"Changed","text":"<ul> <li>Rework theming system to simplify customization</li> </ul>"},{"location":"changelog/#200-alpha1","title":"2.0.0-alpha1","text":"<p>Mordant 2.0 is a rewrite that retains the simple APIs of Mordant 1.0, and adds support for rendering complex widgets.</p>"},{"location":"changelog/#added_12","title":"Added","text":"<ul> <li>Added renderable widgets, including tables, panels, and lists</li> <li>Added markdown rendering</li> <li>Added a theme system to customize text styles on an entire terminal instance</li> <li>Added animations that automatically clear the previous frame when redrawing</li> </ul>"},{"location":"changelog/#changed_13","title":"Changed","text":"<ul> <li>Improved terminal capability detection</li> <li>ANSI colors and styles can now be applied through the <code>TextColors</code> and <code>TextStyles</code> top-level   objects, and <code>Terminal.print</code> will downsample th resulting strings based on the detected terminal   capabilities.</li> </ul>"},{"location":"changelog/#121","title":"1.2.1","text":""},{"location":"changelog/#changed_14","title":"Changed","text":"<ul> <li>Improve support for color detection in IntelliJ and VS Code terminals</li> </ul>"},{"location":"changelog/#120","title":"1.2.0","text":""},{"location":"changelog/#added_13","title":"Added","text":"<ul> <li>Add functions for generating ANSI cursor movement</li> <li>Add ability to generate ANSI color codes from any colormath color object</li> <li>Update colormath to 1.2.0</li> </ul>"},{"location":"changelog/#110","title":"1.1.0","text":""},{"location":"changelog/#added_14","title":"Added","text":"<ul> <li>Add support for XYZ and LAB color spaces</li> </ul>"},{"location":"changelog/#100","title":"1.0.0","text":"<ul> <li>Initial Release</li> </ul>"}]}